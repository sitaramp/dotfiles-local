# Prereqs: Install tmux 2.4+, xclip for better mouse and clipboard support.
# Credit https://github.com/samoshkin/tmux-config/

#tmux display things in 256 colors
set -s default-terminal "xterm-256color"

# True color support
set -ga terminal-overrides ",*-256color:Tc"

# Allow xterm titles in terminal window, terminal scrolling with scrollbar 
#set -g terminal-overrides "xterm*:XT:smcup@:rmcup@"

set -g history-limit 20000
setw -g aggressive-resize on
setw -g xterm-keys on

# Set ability to capture on start and restore on exit window data when running application
setw -g alternate-screen on

# set first window to index 1 (not 0) to map more to the keyboard layout...
set-option -g base-index 1
set-window-option -g pane-base-index 1

#automatically renumber tmux windows
set -g renumber-windows on

set -s escape-time  1                     # faster command sequences
set -s display-time 400                  # messages are displayed for 4 sec
set -g repeat-time 200                   # increase repeat timeout
set -g focus-events on
set -g remain-on-exit off

unbind C-b
set -g prefix `
bind-key ` last-window


set -g prefix2 'C-\'
bind-key 'C-\' send-prefix -2

# To Toggle prefix between ` and C-a
#unbind-key C-z
#bind-key F10 unbind `   \; set -g prefix C-a \; bind-key C-a send-prefix
#bind-key F11 unbind C-a \; set -g prefix `   \; bind-key ` last-window

# To Toggle prefix ON and OFF
bind -T root F12 \
    set prefix None \;\
    set key-table off \;\
    display 'Key binding OFF' \;\
    refresh-client -S \;\

bind -T off F12 \
    set -u prefix \;\
    set -u key-table \;\
    display 'KEy binding ON' \;\
    refresh-client -S


######################
# Key bindings
######################

# unbind default keys we're going to override
unbind '"'  # split-window -h
unbind %    # split-window
unbind }    # swap-pane -D
unbind {    # swap-pane -U
unbind [    # copy-mode
unbind ]    
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer 
unbind =    # choose-buffer
unbind z    # zoom-pane
unbind M-Up    # resize 5 rows up
unbind M-Down  # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left  # resize 5 rows left

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# easy-to-remember split pane commands
bind "|" split-window -h -p 50 -c "#{pane_current_path}"
bind "-" split-window -v -p 50 -c "#{pane_current_path}"

# new window and retain cwd
bind "c" new-window -c "#{pane_current_path}"

# Select pane and windows
#bind -r C-[ previous-window
#bind -r C-] next-window
bind -r Left  previous-window
bind -r Right next-window
bind -r Tab   last-window # cycle thru MRU tabs

# force reload of the config file
bind C-r source-file ~/.tmux.conf \; display "Reloaded .tmux.conf!"

# kill panie/window/session shortcuts
bind x confirm-before -p "Kill pane(y/n)?" kill-pane
bind X confirm-before -p "Kill pane(y/n)?" kill-window

# Smart pane switching with awareness of vim splits.
# This can be done by 2 steps:
# 1. TPM plugin vim-tmux-navigator
# 2. vim plugin tmux-navigator
# Source: https://github.com/christoomey/vim-tmux-navigator

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to shift-ctrl-<h,j,k,l> in iTerm.
bind + resize-pane -Z
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Note that to get command mode you need to hit ESC twice...
bind Escape copy-mode


# Window monitoring for activity and silence
setw -g monitor-activity on

# Activity bell and whistles
set -g visual-activity on

##############
# Mouse Mode
##############
#set -g mode-mouse on
set -g mouse on
bind-key m set -g mouse on  \; display 'Mouse ON'
bind-key M set -g mouse off \; display 'Mouse OFF'

# Non UTF-8 mouse send paste strings like [M# [Ma
# To avoid this set:
#set -g mouse-utf8 off

#################################
# Copy mode, scroll and Paste
#################################

# Use vi keybindings for tmux copy mode.
set -g mode-keys vi
#set -g status-keys vi

#unbind p
bind p paste-buffer
bind C-p choose-buffer

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# Pre tmux 2.4
#bind -t vi-copy 'v' begin-selection
#bind -t vi-copy 'y' copy-selection
#bind -t vi-copy 'Space' halfpage-down
#bind -t vi-copy 'Bspace' halfpage-up

# tmux 2.4+
unbind   -T copy-mode-vi Enter
bind -T copy-mode-vi Enter send-keys -X copy-selection-and-cancel
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection-and-cancel
bind -T copy-mode-vi MouseDown1Pane select-pane \; send-keys -X clear-selection

bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
#bind-key -T copy-mode-vi 'Space' send -X halfpage-down
#bind-key -T copy-mode-vi 'Bspace' send -X halfpage-up

bind-key -T copy-mode C-> swap-pane -D   # swap current pane with the next one
bind-key -T copy-mode C-< swap-pane -U   # swap current pane with the previous one

# For iTerm2, putty, that handle OSC 56 ESC set this to "on"
# For other terminal clients like gnome terminal set this to "external"
set -g set-clipboard on

# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external

 
# Patch for OS X pbpaste and pbcopy under tmux.
#set-option -g default-command "which reattach-to-user-namespace > /dev/null && # reattach-to-user-namespace -l $SHELL || $SHELL"
#set -g default-command "reattach-to-user-namespace zsh -l"


# For local linux GUI
#bind C-c run "tmux save-buffer - | xclip -i -sel clipboard"
#bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"
# X clipboard integration
#bind-key p run "xsel -o | tmux load-buffer - ; tmux paste-buffer"
#bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel -i -p && xsel -o -p | xsel -i -b"


############################
#  Plugins
############################

# The list of Tmux Plugin Manager TPM plugins
# These plugins are loaded at the tail end of the conf file.
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'jimeh/tmux-themepack'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
set -g @plugin 'christoomey/vim-tmux-navigator'
#set -g @plugin 'tmux-plugins/tmux-resurrect'
#set -g @plugin 'tmux-plugins/tmux-continuum'
#set -g @continuum-boot 'on'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
#if "test ! -d ~/.tmux/plugins/tpm" \
#   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"
#run '~/.tmux/plugins/tpm/tpm'

# Expliclity run-shell is required in absence of TPM
# TPM is not working-- this is a temp workaround
run-shell ~/.tmux/plugins/tmux-sensible/sensible.tmux
#run-shell ~/.tmux/plugins/tmux-resurrect/resurrect.tmux
#run-shell ~/.tmux/plugins/tmux-continuum/continuum.tmux
run-shell   ${HOME}/.tmux/plugins/tmux-yank/yank.tmux
#run-shell   ${HOME}/.tmux/plugins/tmux-copycat/copycat.tmux
run-shell   ${HOME}/.tmux/plugins/tmux-themepack/themepack.tmux
run-shell   ${HOME}/.tmux/plugins//vim-tmux-navigator/vim-tmux-navigator.tmux
run-shell   ${HOME}/.tmux/plugins/tmux-better-mouse-mode/scroll_copy_mode.tmux
#set -g @themepack 'powerline/block/green'
source-file ${HOME}/.tmux/plugins/tmux-themepack/powerline/block/orange.tmuxtheme

# Local config
#if-shell "[ -f ~/.tmux.conf.project ]" 'source ~/.tmux.conf.project'
