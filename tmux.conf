# Prereqs: Install tmux 2.4+, xclip, xsel for better mouse and clipboard support.
# Credit https://github.com/samoshkin/tmux-config/
# Credit https://github.com/sunaku/home/
# Credit https://github.com/x3rAx/dotfiles/blob/master/.tmux.conf
# Credit https://github.com/seanh/tmux/blob/master/tmux.conf
# Term issues: https://wiki.archlinux.org/title/Tmux

# if run as "tmux attach", create a session if one does not already exist
#new-session -n $HOSTNAME
set -g default-shell /bin/bash
# Stop login shell re-initializations
set -g default-command "${SHELL}"

# Allow modifier keys in tmux 3.2+
set -s extended-keys on
set -as terminal-features 'xterm*:extkeys'
set -as terminal-features 'xterm*:clipboard'

# https://github.com/tmux/tmux/wiki/FAQ
#tmux display things in 256 colors
set -g default-terminal "tmux-256color"

# enable True Color (i.e. 24-bit true color RGB) escape sequences under
# tell Tmux that outside terminal supports true color
set -as terminal-overrides ",xterm*:Tc"

# Allow xterm titles in terminal window, terminal scrolling with scrollbar
# Enable scrolling using the Shift-PageUp/Down keys:
#set -g terminal-overrides "xterm*:XT:smcup@:rmcup@"
set-option -g set-titles on

# title-string: #S = session name; #T user@host:~; #W window title
set-option -g set-titles-string "#T:#W"

# Rename windows to the names of the commands currently running in them
# (but not if the window has been given a name manually).
set -g automatic-rename on

set -g history-limit 20000
set -g buffer-limit 20
setw -g aggressive-resize on
set -g remain-on-exit off

# Set ability to capture on start and restore on exit window data when running application
setw -g alternate-screen on

# set first window to index 1 (not 0) to map more to the keyboard layout...
#automatically renumber tmux windows
set-option -g base-index 1
set-window-option -g pane-base-index 1
set -g renumber-windows on

setw -g xterm-keys on      # allow vim to receive modifier keys Ctrl, Alt, Shift
set -sg escape-time  1     # let modifier key reach vim
set -g display-time 400    # messages are displayed for 4 sec
set -g repeat-time 200     # increase repeat timeout
set -g focus-events on

# Prefix key
# -------------------
# Change prefix to ` back quote (Keys like Ctrl+a or Ctrl+b are used for cursor movement in bash)
unbind C-b
set -g prefix `
bind-key ` last-window

# Add seconds prefix C-Space as an additional prefix key
#set -g prefix2 C-Space
#bind C-Space send-prefix


######################
# Key bindings
######################

# unbind default keys we're going to override
unbind "\$"    # rename-session
unbind ,       # rename-window
unbind %       # split-window
unbind '"'     # split-window -h
unbind \}      # swap-pane -D
unbind \{      # swap-pane -U
unbind [       # copy-mode
unbind ]
unbind "'"     # select-window
unbind n       # next-window
unbind p       # previous-window
unbind l       # last-window
unbind M-n     # next window with alert
unbind M-p     # next window with alert
unbind o       # focus thru panes
unbind &       # kill-window
unbind "#"     # list-buffer
unbind =       # choose-buffer
unbind z       # zoom-pane
unbind M-Up    # resize 5 rows up
unbind M-Down  # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left  # resize 5 rows left

######################
# Windows and panes
######################

# Rename session and window
bind-key r command-prompt -I "#{window_name}" "rename-window '%%'"
bind-key R command-prompt -I "#{session_name}" "rename-session '%%'"

# force reload of the config file
bind-key C-r source-file ~/.tmux.conf \; display "Reloaded .tmux.conf!"

# new window and retain cwd
unbind c
bind-key "c" new-window -c "#{pane_current_path}"

# kill panie/window/session shortcuts
bind-key x confirm-before -p "Kill pane(y/n)?" kill-pane
bind-key X confirm-before -p "Kill pane(y/n)?" kill-window

# Window monitoring for activity and silence
setw -g monitor-activity on

# Activity bell and whistles
set -g visual-activity on
set -g visual-silence on

# Common UI interaction cues from Blueprint CSS:
# http://blueprintcss.org/tests/parts/forms.html
set-window-option -g window-status-bell-style     'bg=#205791,fg=#d5edf8' # info (blue)
set-window-option -g window-status-activity-style 'bg=#8a1f11,fg=#fbe3e4' # error (red)

bind-key -n M-0 choose-window
bind-key -n M-1 select-window -t :1
bind-key -n M-2 select-window -t :2
bind-key -n M-3 select-window -t :3
bind-key -n M-4 select-window -t :4
bind-key -n M-5 select-window -t :5
bind-key -n M-6 select-window -t :6
bind-key -n M-7 select-window -t :7
bind-key -n M-8 select-window -t :8
bind-key -n M-9 select-window -t :1 \; select-window -t :-1

##############
# Mouse Mode
# https://github.com/tmux/tmux/wiki/Getting-Started#copy-and-paste
##############
#set -g mode-mouse on
set-option -g mouse on
bind-key m set -g mouse on  \; display 'Mouse ON'
bind-key M set -g mouse off \; display 'Mouse OFF'

# Non UTF-8 mouse send paste strings like [M# [Ma
# To avoid this set:
#set -g mouse-utf8 off

# Copy mode, scroll
# https://man.openbsd.org/tmux#WINDOWS_AND_PANES
# -----------------------------
# Fall back to ANSI OSC 52 escape sequence to talk to controlling/parent terminal and pass buffer on local machin
set -g @copy_use_osc52_fallback on

# Note that to get command mode you need to hit ESC twice...
bind-key Escape copy-mode
# trigger copy mode by
bind-key -n M-Up copy-mode
bind-key -n M-c copy-mode

# mouse integration
bind-key -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind-key -n WheelDownPane select-pane -t= \; send-keys -M
bind-key -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M

# Use vi keybindings for tmux copy mode.
setw -g mode-keys vi
set -g status-keys emacs

## Clipboard integration
#https://github.com/tmux/tmux/wiki/Clipboard
#set -s set-clipboard external # only tmux can set the copy buffer
#set -s set-clipboard off      # Use copy-pipe
set -s set-clipboard on        # Use both tmux and apps can set the copy buffer

# Paste / buffer selection
bind-key p paste-buffer
bind-key C-p choose-buffer

# Scroll up/down by 1 line, half screen, whole screen
bind-key -T copy-mode-vi M-Up              send-keys -X scroll-up
bind-key -T copy-mode-vi M-Down            send-keys -X scroll-down
bind-key -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind-key -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind-key -T copy-mode-vi PageDown          send-keys -X page-down
bind-key -T copy-mode-vi PageUp            send-keys -X page-up
# search buffer using copy mode
bind-key -n M-/ copy-mode \;\
  command-prompt -p 'search-backward (press up):' \
    -i 'send-keys -X search-backward-incremental "%%%"'

# Copy and paste
# https://github.com/tmux/tmux/wiki/Clipboard
# ------------------------------------------------------------------
# word separators for automatic word selection
setw -g word-separators ' @"=()[]{}<>*$%@:,;'
setw -ag word-separators "'"

# Make v start a selection, like in vim.
bind-key -T copy-mode-vi v send -X begin-selection
# By default v enables rectangle-toggle (block selection) but I just re-bound v
# to begin-selection, so bind r to rectangle-toggle instead.
bind-key -T copy-mode-vi r send -X rectangle-toggle
bind-key -T copy-mode-vi ? command-prompt -p 'search-backward:' -I '#{pane_search_string}' -i 'send-keys -X search-backward-incremental "%%%"'
bind-key -T copy-mode-vi / command-prompt -p 'search-forward:'  -I '#{pane_search_string}' -i 'send-keys -X search-forward-incremental "%%%"'

bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel -i"
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xsel -i"
bind-key -T copy-mode-vi p send-keys -X cancel \; paste-buffer
bind-key -T copy-mode-vi MouseDown1Pane select-pane \; send-keys -X clear-selection
bind-key -T copy-mode-vi MouseDownEnd1Pane send-keys -X copy-pipe-and-cancel "xsel -i"

# Make right-mouse-click paste from the primary selection (without having to hold down Shift).
# If you like middle click better, change MouseDown3Pane to MouseDown2Pane for middle click.
unbind-key MouseDown3Pane
bind-key -n MouseDown3Pane paste-buffer
bind-key -T copy-mode-vi MouseDown3Pane send-keys -X cancel \; paste-buffer
#bind-key -n MouseDown3Pane run "tmux set-buffer -- \"$(xsel -o);\"; tmux paste-buffer -p;"
#bind -T copy-mode-vi MouseDown3Pane send-keys -X copy-pipe-and-cancel "xsel -i" \; paste-buffer

# Make double-left-click select the word under the cursor (entering copy mode
# if not already in it) and copy the word into the primary selection.
bind-key -T copy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
bind-key -n DoubleClick1Pane select-pane \; copy-mode -M \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"

# Make triple-left-click select the line under the cursor (entering copy mode
# if not already in it) and copy the line into the primary selection.
bind-key -T copy-mode-vi TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"
bind-key -n TripleClick1Pane select-pane \; copy-mode -M \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"

# Double click on the window list to open a new window
bind-key -n DoubleClick1Status new-window -a -t ":$"

# Drag to re-order windows
    # First mark the current window if it isnt. Then, when mouse hovers over
    # another window, select that window and swap it with the marked one.
    bind-key -n MouseDrag1Status if '[ #{pane_marked} -ne 1 ]' \
        'select-pane -m -t=' \
        'select-window -t= ; swap-pane'
    # When releasing the mouse, remove mark
    bind-key -n MouseDragEnd1Status select-pane -M
    bind-key -n MouseDragEnd1StatusLeft select-pane -M
    bind-key -n MouseDragEnd1StatusRight select-pane -M
    bind-key -n MouseDragEnd1StatusDefault select-pane -M

# =====================================
# ===        Renew environment      ===
# =====================================
# Shell variables to update on a session attach
set -g update-environment \
  " DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

# Script to refresh shell variables to values as  seen at most recent attach
bind-key '$' run "~/dotfiles-local/renew_env.sh"

# ==============================================
# ===   Nesting local and remote sessions     ===
# ==============================================

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/dotfiles-local/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session
# To Toggle prefix ON and OFF
bind-key -T root F12 \
    set prefix None \;\
    set key-table off \;\
    display 'Key binding OFF' \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind-key -T off F12 \
    set -u prefix \;\
    set -u key-table \;\
    display 'Key binding ON' \;\
    refresh-client -S

 # Detach from session
 bind d detach
 bind D if -F '#{session_many_attached}' \
     'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
         'display "Session has only 1 client attached"'

############################
#  Plugins
############################

# The list of Tmux Plugin Manager TPM plugins
# These plugins are loaded at the tail end of the conf file.
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'jimeh/tmux-themepack'
    set -g @themepack 'powerline/block/cyan'
#set -g @plugin 'wfxr/tmux-power'
#   set -g @tmux_power_theme 'gold'
set -g @plugin 'tmux-plugins/tmux-yank'
    set -g @yank_action 'copy-pipe-no-clear'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/tmux-resurrect'
    set -g @resurrect-save 'M-s'
    set -g @resurrect-restore 'M-r'
    set -g @resurrect-strategy 'vim'
    set -g @resurrect-processes 'ssh gotop'
set -g @plugin 'tmux-plugins/tmux-continuum'
    set -g @continuum-boot 'on'
    set -g @continuum-restore 'on'
set -g @plugin 'tmux-plugins/tmux-open'
#set -g @plugin 'roosta/tmux-fuzzback'
#   set -g @fuzzback-bind ?
#   set -g @fuzzback-table 'root'
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'jaclu/tmux-power-zoom'
#set -g @plugin 'tmux-plugins/tmux-fpp'
set -g @plugin 'tmux-plugins/tmux-sidebar'
    set -g @sidebar-tree 't'
    set -g @sidebar-tree-focus 'T'
    set -g @sidebar-tree-command 'tree -C'


# Don't clear the selection or exit copy mode after hitting y or lifting the mouse button.

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"
run -b '~/.tmux/plugins/tpm/tpm'

