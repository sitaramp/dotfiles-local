# Prereqs: Install tmux 2.4+, xclip, xsel for better mouse and clipboard support.
# Credit https://github.com/samoshkin/tmux-config/
# Credit https://github.com/sunaku/home/

# if run as "tmux attach", create a session if one does not already exist
new-session -n $HOSTNAME

# enable True Color (i.e. 24-bit true color RGB) escape sequences under
# https://sunaku.github.io/tmux-24bit-color.html
#tmux display things in 256 colors
set -g default-terminal "xterm-256color"
# tell Tmux that outside terminal supports true color
set -ga terminal-overrides ",*256col*:colors=256:Tc"
set -sa terminal-overrides ",*-256color:RBG"

# Allow xterm titles in terminal window, terminal scrolling with scrollbar
#set -g terminal-overrides "xterm*:XT:smcup@:rmcup@"
# title-string: #S = session name; #T pane title; #W
set-option -g set-titles on
#set-option -g set-title-string "#I:#W"
set -g set-titles-string '#{pane_title}'

set -g history-limit 20000
setw -g aggressive-resize on

# Set ability to capture on start and restore on exit window data when running application
setw -g alternate-screen on

# set first window to index 1 (not 0) to map more to the keyboard layout...
#automatically renumber tmux windows
set-option -g base-index 1
set-window-option -g pane-base-index 1
set -g renumber-windows on

setw -g xterm-keys on      # allow vim to receive modifier keys Ctrl, Alt, Shift
set -sg escape-time  0     # let modifier key reach vim
set -g display-time 400    # messages are displayed for 4 sec
set -g repeat-time 200     # increase repeat timeout
set -g focus-events on
set -g remain-on-exit off

unbind C-b
set -g prefix `
bind-key ` last-window


#set -g prefix2 'C-\'
#bind-key 'C-\' send-prefix 1

# To Toggle prefix between ` and C-a
#unbind-key C-z
#bind-key F10 unbind `   \; set -g prefix C-a \; bind-key C-a send-prefix
#bind-key F11 unbind C-a \; set -g prefix `   \; bind-key ` last-window

# To Toggle prefix ON and OFF
bind -T root F12 \
    set prefix None \;\
    set key-table off \;\
    display 'Key binding OFF' \;\
    refresh-client -S \;\

bind -T off F12 \
    set -u prefix \;\
    set -u key-table \;\
    display 'Key binding ON' \;\
    refresh-client -S


######################
# Key bindings
######################

# unbind default keys we're going to override
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window
unbind '"'  # split-window -h
unbind \}    # swap-pane -D
unbind \{    # swap-pane -U
unbind [    # copy-mode
unbind ]
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer
unbind =    # choose-buffer
unbind z    # zoom-pane
unbind M-Up    # resize 5 rows up
unbind M-Down  # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left  # resize 5 rows left

######################
# Windows and panes
######################

# Rename session and window
bind R command-prompt -I "#{window_name}" "rename-window '%%'"
#bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# new window and retain cwd
unbind c
bind "c" new-window -c "#{pane_current_path}"

# Select pane and windows
bind -r Left select-pane -t :.-
bind -r Right select-pane -t :.+
bind -r [ select-pane -t :.-
bind -r ] select-pane -t :.+

bind -r C-Left  previous-window
bind -r C-Right next-window
bind -r C-[ previous-window
bind -r C-] next-window
bind-key C-S-Tab previous-window
bind-key C-Tab next-window
bind-key -n C-S-Tab previous-window
bind-key -n C-Tab next-window
bind -r Tab last-window   # cycle thru MRU tabs

# force reload of the config file
bind r source-file ~/.tmux.conf \; display "Reloaded .tmux.conf!"

# kill panie/window/session shortcuts
bind x confirm-before -p "Kill pane(y/n)?" kill-pane
bind X confirm-before -p "Kill pane(y/n)?" kill-window

# Smart pane switching with awareness of vim splits.
# This can be done by 2 steps:
# 1. TPM plugin vim-tmux-navigator
# 2. vim plugin tmux-navigator
# Source: https://github.com/christoomey/vim-tmux-navigator

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to shift-ctrl-<h,j,k,l> in iTerm.
# Zoom pane
#  See plugin tmux-pain-control

## swap window
#bind-key -n M-< swap-window -t :-1
#bind-key -n M-> swap-window -t :+1
#bind-key -T copy-mode-vi C-> swap-pane -D   # swap current pane with the next one
#bind-key -T copy-mode-vi C-< swap-pane -U   # swap current pane with the previous one


# Window monitoring for activity and silence
setw -g monitor-activity on

# Activity bell and whistles
set -g visual-activity on

# Common UI interaction cues from Blueprint CSS:
# http://blueprintcss.org/tests/parts/forms.html
set-window-option -g window-status-bell-style     'bg=#205791,fg=#d5edf8' # info (blue)
set-window-option -g window-status-activity-style 'bg=#8a1f11,fg=#fbe3e4' # error (red)

##############
# Mouse Mode
##############
#set -g mode-mouse on
set-option -g mouse on
bind-key m set -g mouse on  \; display 'Mouse ON'
bind-key M set -g mouse off \; display 'Mouse OFF'

# Non UTF-8 mouse send paste strings like [M# [Ma
# To avoid this set:
#set -g mouse-utf8 off

#################################
# Copy mode, scroll and Paste
#################################
# yank.sh parameter
#set -g @copy_use_osc52_fallback on

# Note that to get command mode you need to hit ESC twice...
bind Escape copy-mode
# Use vi keybindings for tmux copy mode.
setw -g mode-keys vi
set -g mode-keys vi

## trigger copy mode by
#bind -n M-Up copy-mode

# Make it easier to enter copy-mode.
bind -T root S-Up copy-mode \; send -X scroll-up
bind -T root S-Down copy-mode \; send -X scroll-down
bind -T root S-PageUp copy-mode \; send -X halfpage-up
bind -T root S-PageDown copy-mode \; send -X halfpage-down


# Copy and paste
# --------------
# Make v start a selection, like in vim.
bind -T copy-mode-vi v send -X begin-selection
# By default v enables rectangle-toggle (block selection) but I just re-bound v
# to begin-selection, so bind r to rectangle-toggle instead.
bind -T copy-mode-vi r send -X rectangle-toggle
# Make right-mouse-click paste from the primary selection (without having to hold down Shift).
# If you like middle click better, change MouseDown3Pane to MouseDown2Pane for middle click.
unbind-key MouseDown3Pane
#bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi MouseDown3Pane send -X copy-pipe-and-cancel "xsel -i" \; paste-buffer
bind -n MouseDown3Pane run "tmux set-buffer -b primary_selection \"$(xsel -o)\"; tmux paste-buffer -b primary_selection; tmux delete-buffer -b primary_selection"
# Make double-left-click select the word under the cursor (entering copy mode
# if not already in it) and copy the word into the primary selection.
bind -T copy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
bind -n DoubleClick1Pane select-pane \; copy-mode -M \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
# Make triple-left-click select the line under the cursor (entering copy mode
# if not already in it) and copy the line into the primary selection.
bind -T copy-mode-vi TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"
bind -n TripleClick1Pane select-pane \; copy-mode -M \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"

# =====================================
# ===        Renew environment      ===
# =====================================
set -g update-environment \
  " DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind '$' run "~/dotfiles-local/renew_env.sh"
# ==============================================
# ===   Nesting local and remote sessions     ===
# ==============================================

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/dotfiles-local/tmux.remote.conf'
 # Detach from session
 bind d detach
 bind D if -F '#{session_many_attached}' \
     'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
         'display "Session has only 1 client attached"'

############################
#  Plugins
############################

# The list of Tmux Plugin Manager TPM plugins
# These plugins are loaded at the tail end of the conf file.
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'jimeh/tmux-themepack'
#set -g @plugin 'wfxr/tmux-power'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'roosta/tmux-fuzzback'
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'jaclu/tmux-power-zoom'
#set -g @plugin 'tmux-plugins/tmux-fpp'

# Plugin Properties
set -g @continuum-boot 'on'
#set -g @fuzzback-bind f
#set -g @tmux_power_theme 'gold'
set -g @themepack 'powerline/block/cyan'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"
run -b '~/.tmux/plugins/tpm/tpm'

## Expliclity run-shell is required in absence of TPM
## TPM is not working-- this is a temp workaround
#run-shell ~/.tmux/plugins/tmux-sensible/sensible.tmux
##run-shell ~/.tmux/plugins/tmux-resurrect/resurrect.tmux
##run-shell ~/.tmux/plugins/tmux-continuum/continuum.tmux
#run-shell   ${HOME}/.tmux/plugins/tmux-yank/yank.tmux
##run-shell  ${HOME}/.tmux/plugins/tmux-copycat/copycat.tmux
#run-shell   ${HOME}/.tmux/plugins/tmux-themepack/themepack.tmux
#run-shell   ${HOME}/.tmux/plugins//vim-tmux-navigator/vim-tmux-navigator.tmux
#run-shell   ${HOME}/.tmux/plugins/tmux-better-mouse-mode/scroll_copy_mode.tmux
##set -g @themepack 'powerline/block/green'

source-file ${HOME}/.tmux/plugins/tmux-themepack/powerline/block/orange.tmuxtheme

# Local config
#if-shell "[ -f ~/.tmux.conf.project ]" 'source ~/.tmux.conf.project'
